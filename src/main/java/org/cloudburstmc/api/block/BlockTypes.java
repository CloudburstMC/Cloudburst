package org.cloudburstmc.api.block;

import lombok.experimental.UtilityClass;

@UtilityClass
public class BlockTypes {

    public static final BlockType AIR = BlockType.of(BlockIds.AIR);
    public static final BlockType STONE = BlockType.of(BlockIds.STONE, BlockTraits.STONE_TYPE);
    public static final BlockType GRASS = BlockType.of(BlockIds.GRASS);
    public static final BlockType DIRT = BlockType.of(BlockIds.DIRT, BlockTraits.DIRT_TYPE);
    public static final BlockType COBBLESTONE = BlockType.of(BlockIds.COBBLESTONE);
    public static final BlockType PLANKS = BlockType.of(BlockIds.OAK_PLANKS, BlockTraits.TREE_SPECIES);
    public static final BlockType SAPLING = BlockType.of(BlockIds.SAPLING, BlockTraits.TREE_SPECIES_OVERWORLD, BlockTraits.HAS_AGE);
    public static final BlockType BEDROCK = BlockType.of(BlockIds.BEDROCK, BlockTraits.HAS_INFINIBURN);
    public static final BlockType FLOWING_WATER = BlockType.of(BlockIds.FLOWING_WATER, BlockTraits.IS_FLOWING, BlockTraits.FLUID_LEVEL);
    public static final BlockType WATER = BlockType.of(BlockIds.WATER, BlockTraits.IS_FLOWING, BlockTraits.FLUID_LEVEL);
    public static final BlockType FLOWING_LAVA = BlockType.of(BlockIds.FLOWING_LAVA, BlockTraits.IS_FLOWING, BlockTraits.FLUID_LEVEL);
    public static final BlockType LAVA = BlockType.of(BlockIds.LAVA, BlockTraits.IS_FLOWING, BlockTraits.FLUID_LEVEL);
    public static final BlockType SAND = BlockType.of(BlockIds.SAND, BlockTraits.SAND_TYPE);
    public static final BlockType GRAVEL = BlockType.of(BlockIds.GRAVEL);
    public static final BlockType GOLD_ORE = BlockType.of(BlockIds.GOLD_ORE);
    public static final BlockType IRON_ORE = BlockType.of(BlockIds.IRON_ORE);
    public static final BlockType COAL_ORE = BlockType.of(BlockIds.COAL_ORE);
    public static final BlockType LOG = BlockType.of(BlockIds.LOG, BlockTraits.TREE_SPECIES, BlockTraits.AXIS, BlockTraits.IS_STRIPPED);
    public static final BlockType LEAVES = BlockType.of(BlockIds.LEAVES, BlockTraits.TREE_SPECIES_OVERWORLD, BlockTraits.IS_PERSISTENT, BlockTraits.HAS_UPDATE);
    public static final BlockType SPONGE = BlockType.of(BlockIds.SPONGE, BlockTraits.SPONGE_TYPE);
    public static final BlockType GLASS = BlockType.of(BlockIds.GLASS);
    public static final BlockType LAPIS_ORE = BlockType.of(BlockIds.LAPIS_ORE);
    public static final BlockType LAPIS_BLOCK = BlockType.of(BlockIds.LAPIS_BLOCK);
    public static final BlockType DISPENSER = BlockType.of(BlockIds.DISPENSER, BlockTraits.IS_TRIGGERED, BlockTraits.FACING_DIRECTION);
    public static final BlockType SANDSTONE = BlockType.of(BlockIds.SANDSTONE, BlockTraits.SAND_STONE_TYPE);
    public static final BlockType NOTEBLOCK = BlockType.of(BlockIds.NOTEBLOCK);
    public static final BlockType BED = BlockType.of(BlockIds.BED, BlockTraits.IS_OCCUPIED, BlockTraits.IS_HEAD_PIECE, BlockTraits.DIRECTION);
    public static final BlockType GOLDEN_RAIL = BlockType.of(BlockIds.GOLDEN_RAIL, BlockTraits.IS_POWERED, BlockTraits.SIMPLE_RAIL_DIRECTION);
    public static final BlockType DETECTOR_RAIL = BlockType.of(BlockIds.DETECTOR_RAIL, BlockTraits.IS_TRIGGERED, BlockTraits.SIMPLE_RAIL_DIRECTION);
    public static final BlockType WEB = BlockType.of(BlockIds.WEB);
    public static final BlockType TALL_GRASS = BlockType.of(BlockIds.TALL_GRASS, BlockTraits.TALL_GRASS_TYPE);
    public static final BlockType DEADBUSH = BlockType.of(BlockIds.DEADBUSH);
    public static final BlockType PISTON = BlockType.of(BlockIds.PISTON, BlockTraits.FACING_DIRECTION, BlockTraits.IS_STICKY);
    public static final BlockType PISTON_ARM_COLLISION = BlockType.of(BlockIds.PISTON_ARM_COLLISION, BlockTraits.FACING_DIRECTION, BlockTraits.IS_STICKY);
    public static final BlockType WOOL = BlockType.of(BlockIds.WOOL, BlockTraits.COLOR);
    public static final BlockType ELEMENT = BlockType.of(BlockIds.ELEMENT_0, BlockTraits.ELEMENT_TYPE);
    public static final BlockType FLOWER = BlockType.of(BlockIds.RED_FLOWER, BlockTraits.FLOWER_TYPE);
    public static final BlockType BROWN_MUSHROOM = BlockType.of(BlockIds.BROWN_MUSHROOM);
    public static final BlockType RED_MUSHROOM = BlockType.of(BlockIds.RED_MUSHROOM);
    public static final BlockType GOLD_BLOCK = BlockType.of(BlockIds.GOLD_BLOCK);
    public static final BlockType IRON_BLOCK = BlockType.of(BlockIds.IRON_BLOCK);
    public static final BlockType STONE_SLAB = BlockType.of(BlockIds.STONE_SLAB, BlockTraits.SLAB_SLOT, BlockTraits.STONE_SLAB_TYPE);
    public static final BlockType BRICK_BLOCK = BlockType.of(BlockIds.BRICK_BLOCK);
    public static final BlockType TNT = BlockType.of(BlockIds.TNT, BlockTraits.EXPLODE, BlockTraits.IS_ALLOWED_UNDERWATER);
    public static final BlockType BOOKSHELF = BlockType.of(BlockIds.BOOKSHELF);
    public static final BlockType MOSSY_COBBLESTONE = BlockType.of(BlockIds.MOSSY_COBBLESTONE);
    public static final BlockType OBSIDIAN = BlockType.of(BlockIds.OBSIDIAN);
    public static final BlockType TORCH = BlockType.of(BlockIds.TORCH, BlockTraits.TORCH_DIRECTION, BlockTraits.IS_SOUL);
    public static final BlockType FIRE = BlockType.of(BlockIds.FIRE, BlockTraits.AGE);
    public static final BlockType MOB_SPAWNER = BlockType.of(BlockIds.MOB_SPAWNER);
    public static final BlockType WOODEN_STAIRS = BlockType.of(BlockIds.OAK_STAIRS, BlockTraits.DIRECTION, BlockTraits.IS_UPSIDE_DOWN, BlockTraits.TREE_SPECIES);
    public static final BlockType CHEST = BlockType.of(BlockIds.CHEST, BlockTraits.FACING_DIRECTION);
    public static final BlockType REDSTONE_WIRE = BlockType.of(BlockIds.REDSTONE_WIRE, BlockTraits.REDSTONE_SIGNAL);
    public static final BlockType DIAMOND_ORE = BlockType.of(BlockIds.DIAMOND_ORE);
    public static final BlockType DIAMOND_BLOCK = BlockType.of(BlockIds.DIAMOND_BLOCK);
    public static final BlockType CRAFTING_TABLE = BlockType.of(BlockIds.CRAFTING_TABLE);
    public static final BlockType WHEAT = BlockType.of(BlockIds.WHEAT, BlockTraits.GROWTH);
    public static final BlockType FARMLAND = BlockType.of(BlockIds.FARMLAND, BlockTraits.MOISTURIZED_AMOUNT);
    public static final BlockType FURNACE = BlockType.of(BlockIds.FURNACE, BlockTraits.FACING_DIRECTION, BlockTraits.IS_EXTINGUISHED);
    //    public static final BlockType LIT_FURNACE = BlockType.of(BlockIds.LIT_FURNACE);
    public static final BlockType STANDING_SIGN = BlockType.of(BlockIds.OAK_STANDING_SIGN, BlockTraits.CARDINAL_DIRECTION, BlockTraits.TREE_SPECIES);
    public static final BlockType WOODEN_DOOR = BlockType.of(BlockIds.OAK_DOOR, BlockTraits.IS_OPEN, BlockTraits.DIRECTION, BlockTraits.IS_DOOR_HINGE, BlockTraits.IS_UPPER_BLOCK, BlockTraits.TREE_SPECIES);
    public static final BlockType LADDER = BlockType.of(BlockIds.LADDER, BlockTraits.FACING_DIRECTION);
    public static final BlockType RAIL = BlockType.of(BlockIds.RAIL, BlockTraits.RAIL_DIRECTION);
    public static final BlockType STONE_STAIRS = BlockType.of(BlockIds.STONE_STAIRS, BlockTraits.IS_UPSIDE_DOWN, BlockTraits.DIRECTION, BlockTraits.STONE_STAIRS_TYPE);
    public static final BlockType WALL_SIGN = BlockType.of(BlockIds.OAK_WALL_SIGN, BlockTraits.FACING_DIRECTION, BlockTraits.TREE_SPECIES);
    public static final BlockType LEVER = BlockType.of(BlockIds.LEVER, BlockTraits.IS_OPEN, BlockTraits.LEVER_DIRECTION);
    public static final BlockType STONE_PRESSURE_PLATE = BlockType.of(BlockIds.STONE_PRESSURE_PLATE, BlockTraits.REDSTONE_SIGNAL, BlockTraits.STONE_PRESSURE_PLATE_TYPE);
    public static final BlockType IRON_DOOR = BlockType.of(BlockIds.IRON_DOOR, BlockTraits.IS_OPEN, BlockTraits.IS_DOOR_HINGE, BlockTraits.IS_UPPER_BLOCK, BlockTraits.DIRECTION);
    public static final BlockType WOODEN_PRESSURE_PLATE = BlockType.of(BlockIds.OAK_PRESSURE_PLATE, BlockTraits.REDSTONE_SIGNAL, BlockTraits.TREE_SPECIES);
    public static final BlockType REDSTONE_ORE = BlockType.of(BlockIds.REDSTONE_ORE, BlockTraits.IS_EXTINGUISHED);
    public static final BlockType REDSTONE_TORCH = BlockType.of(BlockIds.REDSTONE_TORCH, BlockTraits.TORCH_DIRECTION, BlockTraits.IS_POWERED);
    public static final BlockType STONE_BUTTON = BlockType.of(BlockIds.STONE_BUTTON, BlockTraits.FACING_DIRECTION, BlockTraits.IS_BUTTON_PRESSED, BlockTraits.STONE_BUTTON_TYPE);
    public static final BlockType SNOW_LAYER = BlockType.of(BlockIds.SNOW_LAYER, BlockTraits.IS_COVERED, BlockTraits.HEIGHT);
    public static final BlockType ICE = BlockType.of(BlockIds.ICE);
    public static final BlockType SNOW = BlockType.of(BlockIds.SNOW);
    public static final BlockType CACTUS = BlockType.of(BlockIds.CACTUS, BlockTraits.AGE);
    public static final BlockType CLAY = BlockType.of(BlockIds.CLAY);
    public static final BlockType REEDS = BlockType.of(BlockIds.REEDS, BlockTraits.AGE);
    public static final BlockType JUKEBOX = BlockType.of(BlockIds.JUKEBOX);
    public static final BlockType WOODEN_FENCE = BlockType.of(BlockIds.FENCE, BlockTraits.TREE_SPECIES);
    public static final BlockType PUMPKIN = BlockType.of(BlockIds.PUMPKIN, BlockTraits.DIRECTION);
    public static final BlockType NETHERRACK = BlockType.of(BlockIds.NETHERRACK);
    public static final BlockType SOUL_SAND = BlockType.of(BlockIds.SOUL_SAND);
    public static final BlockType GLOWSTONE = BlockType.of(BlockIds.GLOWSTONE);
    public static final BlockType PORTAL = BlockType.of(BlockIds.PORTAL, BlockTraits.PORTAL_AXIS);
    public static final BlockType LIT_PUMPKIN = BlockType.of(BlockIds.LIT_PUMPKIN, BlockTraits.DIRECTION);
    public static final BlockType CAKE = BlockType.of(BlockIds.CAKE, BlockTraits.BITE_COUNTER);
    public static final BlockType REPEATER = BlockType.of(BlockIds.UNPOWERED_REPEATER, BlockTraits.REPEATER_DELAY, BlockTraits.DIRECTION, BlockTraits.IS_POWERED);
    public static final BlockType INVISIBLE_BEDROCK = BlockType.of(BlockIds.INVISIBLE_BEDROCK);
    public static final BlockType WOODEN_TRAPDOOR = BlockType.of(BlockIds.OAK_TRAPDOOR, BlockTraits.IS_OPEN, BlockTraits.IS_UPSIDE_DOWN, BlockTraits.DIRECTION, BlockTraits.TREE_SPECIES);
    public static final BlockType MONSTER_EGG = BlockType.of(BlockIds.MONSTER_EGG, BlockTraits.MONSTER_EGG_STONE_TYPE);
    public static final BlockType STONEBRICK = BlockType.of(BlockIds.STONEBRICK, BlockTraits.STONE_BRICK_TYPE);
    public static final BlockType BROWN_MUSHROOM_BLOCK = BlockType.of(BlockIds.BROWN_MUSHROOM_BLOCK, BlockTraits.HUGE_MUSHROOM_BITS);
    public static final BlockType RED_MUSHROOM_BLOCK = BlockType.of(BlockIds.RED_MUSHROOM_BLOCK, BlockTraits.HUGE_MUSHROOM_BITS);
    public static final BlockType IRON_BARS = BlockType.of(BlockIds.IRON_BARS);
    public static final BlockType GLASS_PANE = BlockType.of(BlockIds.GLASS_PANE);
    public static final BlockType MELON_BLOCK = BlockType.of(BlockIds.MELON_BLOCK);
    public static final BlockType PUMPKIN_STEM = BlockType.of(BlockIds.PUMPKIN_STEM, BlockTraits.FACING_DIRECTION, BlockTraits.GROWTH);
    public static final BlockType MELON_STEM = BlockType.of(BlockIds.MELON_STEM, BlockTraits.FACING_DIRECTION, BlockTraits.GROWTH);
    public static final BlockType VINE = BlockType.of(BlockIds.VINE, BlockTraits.VINE_DIRECTION_BITS);
    public static final BlockType WOODEN_FENCE_GATE = BlockType.of(BlockIds.OAK_FENCE_GATE, BlockTraits.IS_IN_WALL, BlockTraits.IS_OPEN, BlockTraits.DIRECTION, BlockTraits.TREE_SPECIES);
    public static final BlockType MYCELIUM = BlockType.of(BlockIds.MYCELIUM);
    public static final BlockType WATERLILY = BlockType.of(BlockIds.WATERLILY);
    public static final BlockType NETHER_BRICK = BlockType.of(BlockIds.NETHER_BRICK, BlockTraits.NETHER_BRICK_TYPE);
    public static final BlockType NETHER_BRICK_FENCE = BlockType.of(BlockIds.NETHER_BRICK_FENCE);
    public static final BlockType NETHER_WART = BlockType.of(BlockIds.NETHER_WART, BlockTraits.WART_GROWTH);
    public static final BlockType ENCHANTING_TABLE = BlockType.of(BlockIds.ENCHANTING_TABLE);
    public static final BlockType BREWING_STAND = BlockType.of(BlockIds.BREWING_STAND, BlockTraits.IS_BREWING_C, BlockTraits.IS_BREWING_A, BlockTraits.IS_BREWING_B);
    public static final BlockType CAULDRON = BlockType.of(BlockIds.CAULDRON, BlockTraits.FILL_LEVEL, BlockTraits.FLUID_TYPE, BlockTraits.CAULDRON_TYPE);
    public static final BlockType END_PORTAL = BlockType.of(BlockIds.END_PORTAL);
    public static final BlockType END_PORTAL_FRAME = BlockType.of(BlockIds.END_PORTAL_FRAME, BlockTraits.HAS_END_PORTAL_EYE, BlockTraits.DIRECTION);
    public static final BlockType END_STONE = BlockType.of(BlockIds.END_STONE);
    public static final BlockType DRAGON_EGG = BlockType.of(BlockIds.DRAGON_EGG);
    public static final BlockType REDSTONE_LAMP = BlockType.of(BlockIds.REDSTONE_LAMP, BlockTraits.IS_POWERED);
    //    public static final BlockType LIT_REDSTONE_LAMP = BlockType.of(BlockIds.LIT_REDSTONE_LAMP);
    public static final BlockType DROPPER = BlockType.of(BlockIds.DROPPER, BlockTraits.FACING_DIRECTION, BlockTraits.IS_TRIGGERED);
    public static final BlockType ACTIVATOR_RAIL = BlockType.of(BlockIds.ACTIVATOR_RAIL, BlockTraits.SIMPLE_RAIL_DIRECTION, BlockTraits.IS_POWERED);
    public static final BlockType COCOA = BlockType.of(BlockIds.COCOA, BlockTraits.COCOA_AGE, BlockTraits.DIRECTION);
    public static final BlockType EMERALD_ORE = BlockType.of(BlockIds.EMERALD_ORE);
    public static final BlockType ENDER_CHEST = BlockType.of(BlockIds.ENDER_CHEST, BlockTraits.FACING_DIRECTION);
    public static final BlockType TRIPWIRE_HOOK = BlockType.of(BlockIds.TRIPWIRE_HOOK, BlockTraits.IS_POWERED, BlockTraits.IS_ATTACHED, BlockTraits.DIRECTION);
    public static final BlockType TRIP_WIRE = BlockType.of(BlockIds.TRIP_WIRE, BlockTraits.IS_POWERED, BlockTraits.IS_SUSPENDED, BlockTraits.IS_DISARMED, BlockTraits.IS_ATTACHED);
    public static final BlockType EMERALD_BLOCK = BlockType.of(BlockIds.EMERALD_BLOCK);
    public static final BlockType COMMAND_BLOCK = BlockType.of(BlockIds.COMMAND_BLOCK, BlockTraits.IS_CONDITIONAL, BlockTraits.FACING_DIRECTION);
    public static final BlockType BEACON = BlockType.of(BlockIds.BEACON);
    public static final BlockType STONE_WALL = BlockType.of(BlockIds.COBBLESTONE_WALL, BlockTraits.WALL_CONNECTION_EAST, BlockTraits.HAS_POST, BlockTraits.WALL_CONNECTION_SOUTH, BlockTraits.WALL_CONNECTION_WEST, BlockTraits.WALL_CONNECTION_NORTH, BlockTraits.WALL_BLOCK_TYPE);
    public static final BlockType FLOWER_POT = BlockType.of(BlockIds.FLOWER_POT, BlockTraits.HAS_UPDATE);
    public static final BlockType CARROTS = BlockType.of(BlockIds.CARROTS, BlockTraits.GROWTH);
    public static final BlockType POTATOES = BlockType.of(BlockIds.POTATOES, BlockTraits.GROWTH);
    public static final BlockType WOODEN_BUTTON = BlockType.of(BlockIds.OAK_BUTTON, BlockTraits.IS_BUTTON_PRESSED, BlockTraits.FACING_DIRECTION, BlockTraits.TREE_SPECIES);
    public static final BlockType SKULL = BlockType.of(BlockIds.SKULL, BlockTraits.FACING_DIRECTION);
    public static final BlockType ANVIL = BlockType.of(BlockIds.ANVIL, BlockTraits.DAMAGE, BlockTraits.DIRECTION);
    public static final BlockType TRAPPED_CHEST = BlockType.of(BlockIds.TRAPPED_CHEST, BlockTraits.FACING_DIRECTION);
    public static final BlockType LIGHT_WEIGHTED_PRESSURE_PLATE = BlockType.of(BlockIds.LIGHT_WEIGHTED_PRESSURE_PLATE, BlockTraits.REDSTONE_SIGNAL);
    public static final BlockType HEAVY_WEIGHTED_PRESSURE_PLATE = BlockType.of(BlockIds.HEAVY_WEIGHTED_PRESSURE_PLATE, BlockTraits.REDSTONE_SIGNAL);
    public static final BlockType COMPARATOR = BlockType.of(BlockIds.UNPOWERED_COMPARATOR, BlockTraits.IS_OUTPUT_LIT, BlockTraits.IS_OUTPUT_SUBTRACT, BlockTraits.DIRECTION, BlockTraits.IS_POWERED);
    public static final BlockType DAYLIGHT_DETECTOR = BlockType.of(BlockIds.DAYLIGHT_DETECTOR, BlockTraits.REDSTONE_SIGNAL);
    public static final BlockType REDSTONE_BLOCK = BlockType.of(BlockIds.REDSTONE_BLOCK);
    public static final BlockType QUARTZ_ORE = BlockType.of(BlockIds.QUARTZ_ORE);
    public static final BlockType HOPPER = BlockType.of(BlockIds.HOPPER, BlockTraits.FACING_DIRECTION, BlockTraits.IS_TOGGLED);
    public static final BlockType QUARTZ_BLOCK = BlockType.of(BlockIds.QUARTZ_BLOCK, BlockTraits.CHISEL_TYPE, BlockTraits.AXIS);
    public static final BlockType WOODEN_SLAB = BlockType.of(BlockIds.OAK_SLAB, BlockTraits.SLAB_SLOT, BlockTraits.TREE_SPECIES);
    public static final BlockType STAINED_HARDENED_CLAY = BlockType.of(BlockIds.STAINED_HARDENED_CLAY, BlockTraits.COLOR);
    public static final BlockType STAINED_GLASS_PANE = BlockType.of(BlockIds.STAINED_GLASS_PANE, BlockTraits.COLOR);
    public static final BlockType SLIME = BlockType.of(BlockIds.SLIME);
    public static final BlockType IRON_TRAPDOOR = BlockType.of(BlockIds.IRON_TRAPDOOR, BlockTraits.DIRECTION, BlockTraits.IS_UPSIDE_DOWN, BlockTraits.IS_OPEN);
    public static final BlockType PRISMARINE = BlockType.of(BlockIds.PRISMARINE, BlockTraits.PRISMARINE_BLOCK_TYPE);
    public static final BlockType SEA_LANTERN = BlockType.of(BlockIds.SEA_LANTERN);
    public static final BlockType HAY_BLOCK = BlockType.of(BlockIds.HAY_BLOCK, BlockTraits.DEPRECATED, BlockTraits.AXIS);
    public static final BlockType CARPET = BlockType.of(BlockIds.CARPET, BlockTraits.COLOR);
    public static final BlockType HARDENED_CLAY = BlockType.of(BlockIds.HARDENED_CLAY);
    public static final BlockType COAL_BLOCK = BlockType.of(BlockIds.COAL_BLOCK);
    public static final BlockType PACKED_ICE = BlockType.of(BlockIds.PACKED_ICE);
    public static final BlockType DOUBLE_PLANT = BlockType.of(BlockIds.DOUBLE_PLANT, BlockTraits.IS_UPPER_BLOCK, BlockTraits.DOUBLE_PLANT_TYPE);
    public static final BlockType STANDING_BANNER = BlockType.of(BlockIds.STANDING_BANNER, BlockTraits.CARDINAL_DIRECTION);
    public static final BlockType WALL_BANNER = BlockType.of(BlockIds.WALL_BANNER, BlockTraits.FACING_DIRECTION);
    public static final BlockType DAYLIGHT_DETECTOR_INVERTED = BlockType.of(BlockIds.DAYLIGHT_DETECTOR_INVERTED, BlockTraits.REDSTONE_SIGNAL);
    public static final BlockType RED_SANDSTONE = BlockType.of(BlockIds.RED_SANDSTONE, BlockTraits.SAND_STONE_TYPE);
    public static final BlockType REPEATING_COMMAND_BLOCK = BlockType.of(BlockIds.REPEATING_COMMAND_BLOCK, BlockTraits.IS_CONDITIONAL, BlockTraits.FACING_DIRECTION);
    public static final BlockType CHAIN_COMMAND_BLOCK = BlockType.of(BlockIds.CHAIN_COMMAND_BLOCK, BlockTraits.IS_CONDITIONAL, BlockTraits.FACING_DIRECTION);
    public static final BlockType HARD_GLASS_PANE = BlockType.of(BlockIds.HARD_GLASS_PANE);
    public static final BlockType HARD_STAINED_GLASS_PANE = BlockType.of(BlockIds.HARD_STAINED_GLASS_PANE, BlockTraits.COLOR);
    public static final BlockType CHEMICAL_HEAT = BlockType.of(BlockIds.CHEMICAL_HEAT);
    public static final BlockType GRASS_PATH = BlockType.of(BlockIds.GRASS_PATH);
    public static final BlockType FRAME = BlockType.of(BlockIds.FRAME, BlockTraits.FACING_DIRECTION, BlockTraits.HAS_MAP, BlockTraits.HAS_PHOTO);
    public static final BlockType CHORUS_FLOWER = BlockType.of(BlockIds.CHORUS_FLOWER, BlockTraits.CHORUS_AGE);
    public static final BlockType PURPUR_BLOCK = BlockType.of(BlockIds.PURPUR_BLOCK, BlockTraits.CHISEL_TYPE, BlockTraits.AXIS);
    public static final BlockType COLORED_TORCH_RG = BlockType.of(BlockIds.COLORED_TORCH_RG, BlockTraits.HAS_COLOR, BlockTraits.TORCH_DIRECTION);
    public static final BlockType COLORED_TORCH_BP = BlockType.of(BlockIds.COLORED_TORCH_BP, BlockTraits.HAS_COLOR, BlockTraits.TORCH_DIRECTION);
    public static final BlockType UNDYED_SHULKER_BOX = BlockType.of(BlockIds.UNDYED_SHULKER_BOX);
    public static final BlockType END_BRICKS = BlockType.of(BlockIds.END_BRICKS);
    public static final BlockType FROSTED_ICE = BlockType.of(BlockIds.FROSTED_ICE, BlockTraits.ICE_AGE);
    public static final BlockType END_ROD = BlockType.of(BlockIds.END_ROD, BlockTraits.FACING_DIRECTION);
    public static final BlockType END_GATEWAY = BlockType.of(BlockIds.END_GATEWAY);
    public static final BlockType ALLOW = BlockType.of(BlockIds.ALLOW);
    public static final BlockType DENY = BlockType.of(BlockIds.DENY);
    public static final BlockType BORDER_BLOCK = BlockType.of(BlockIds.BORDER_BLOCK, BlockTraits.WALL_CONNECTION_EAST, BlockTraits.HAS_POST, BlockTraits.WALL_CONNECTION_SOUTH, BlockTraits.WALL_CONNECTION_WEST, BlockTraits.WALL_CONNECTION_NORTH);
    public static final BlockType MAGMA = BlockType.of(BlockIds.MAGMA);
    public static final BlockType NETHER_WART_BLOCK = BlockType.of(BlockIds.NETHER_WART_BLOCK, BlockTraits.TREE_SPECIES_NETHER);
    public static final BlockType BONE_BLOCK = BlockType.of(BlockIds.BONE_BLOCK, BlockTraits.DEPRECATED, BlockTraits.AXIS);
    public static final BlockType STRUCTURE_VOID = BlockType.of(BlockIds.STRUCTURE_VOID, BlockTraits.STRUCTURE_VOID_TYPE);
    public static final BlockType SHULKER_BOX = BlockType.of(BlockIds.SHULKER_BOX, BlockTraits.COLOR);
    public static final BlockType GLAZED_TERRACOTTA = BlockType.of(BlockIds.WHITE_GLAZED_TERRACOTTA, BlockTraits.FACING_DIRECTION, BlockTraits.COLOR_TERRACOTTA);
    public static final BlockType CONCRETE = BlockType.of(BlockIds.CONCRETE, BlockTraits.COLOR);
    public static final BlockType CONCRETE_POWDER = BlockType.of(BlockIds.CONCRETE_POWDER, BlockTraits.COLOR);
    public static final BlockType CHEMISTRY_TABLE = BlockType.of(BlockIds.CHEMISTRY_TABLE, BlockTraits.CHEMISTRY_TABLE_TYPE, BlockTraits.DIRECTION);
    public static final BlockType UNDERWATER_TORCH = BlockType.of(BlockIds.UNDERWATER_TORCH, BlockTraits.TORCH_DIRECTION);
    public static final BlockType CHORUS_PLANT = BlockType.of(BlockIds.CHORUS_PLANT);
    public static final BlockType STAINED_GLASS = BlockType.of(BlockIds.STAINED_GLASS, BlockTraits.COLOR);
    public static final BlockType CAMERA = BlockType.of(BlockIds.CAMERA);
    public static final BlockType PODZOL = BlockType.of(BlockIds.PODZOL);
    public static final BlockType BEETROOT = BlockType.of(BlockIds.BEETROOT, BlockTraits.GROWTH);
    public static final BlockType STONECUTTER = BlockType.of(BlockIds.STONECUTTER);
    public static final BlockType GLOWING_OBSIDIAN = BlockType.of(BlockIds.GLOWING_OBSIDIAN);
    public static final BlockType NETHER_REACTOR = BlockType.of(BlockIds.NETHER_REACTOR);
    public static final BlockType INFO_UPDATE = BlockType.of(BlockIds.INFO_UPDATE);
    public static final BlockType INFO_UPDATE2 = BlockType.of(BlockIds.INFO_UPDATE2);
    public static final BlockType MOVING_BLOCK = BlockType.of(BlockIds.MOVING_BLOCK);
    public static final BlockType OBSERVER = BlockType.of(BlockIds.OBSERVER, BlockTraits.FACING_DIRECTION, BlockTraits.IS_POWERED);
    public static final BlockType STRUCTURE_BLOCK = BlockType.of(BlockIds.STRUCTURE_BLOCK, BlockTraits.STRUCTURE_BLOCK_TYPE);
    public static final BlockType HARD_GLASS = BlockType.of(BlockIds.HARD_GLASS);
    public static final BlockType HARD_STAINED_GLASS = BlockType.of(BlockIds.HARD_STAINED_GLASS, BlockTraits.COLOR);
    public static final BlockType RESERVED6 = BlockType.of(BlockIds.RESERVED6);
    public static final BlockType BLUE_ICE = BlockType.of(BlockIds.BLUE_ICE);
    public static final BlockType SEAGRASS = BlockType.of(BlockIds.SEAGRASS, BlockTraits.SEA_GRASS_TYPE);
    public static final BlockType CORAL = BlockType.of(BlockIds.CORAL, BlockTraits.CORAL_COLOR, BlockTraits.IS_DEAD);
    public static final BlockType CORAL_BLOCK = BlockType.of(BlockIds.CORAL_BLOCK, BlockTraits.CORAL_COLOR, BlockTraits.IS_DEAD);
    public static final BlockType CORAL_FAN = BlockType.of(BlockIds.CORAL_FAN, BlockTraits.CORAL_COLOR, BlockTraits.CORAL_FAN_DIRECTION);
    public static final BlockType CORAL_FAN_DEAD = BlockType.of(BlockIds.CORAL_FAN_DEAD, BlockTraits.CORAL_COLOR, BlockTraits.CORAL_FAN_DIRECTION);
    public static final BlockType CORAL_FAN_HANG = BlockType.of(BlockIds.CORAL_FAN_HANG, BlockTraits.DIRECTION, BlockTraits.IS_DEAD, BlockTraits.CORAL_HANG_COLOR);
    public static final BlockType KELP = BlockType.of(BlockIds.KELP, BlockTraits.KELP_AGE);
    public static final BlockType DRIED_KELP_BLOCK = BlockType.of(BlockIds.DRIED_KELP_BLOCK);
    public static final BlockType CARVED_PUMPKIN = BlockType.of(BlockIds.CARVED_PUMPKIN, BlockTraits.DIRECTION);
    public static final BlockType SEA_PICKLE = BlockType.of(BlockIds.SEA_PICKLE, BlockTraits.CLUSTER_COUNT, BlockTraits.IS_DEAD);
    public static final BlockType CONDUIT = BlockType.of(BlockIds.CONDUIT);
    public static final BlockType TURTLE_EGG = BlockType.of(BlockIds.TURTLE_EGG, BlockTraits.CRACKED_STATE, BlockTraits.TURTLE_EGG_COUNT);
    public static final BlockType BUBBLE_COLUMN = BlockType.of(BlockIds.BUBBLE_COLUMN, BlockTraits.HAS_DRAG_DOWN);
    public static final BlockType BARRIER = BlockType.of(BlockIds.BARRIER);
    public static final BlockType BAMBOO = BlockType.of(BlockIds.BAMBOO, BlockTraits.BAMBOO_LEAF_SIZE, BlockTraits.HAS_AGE, BlockTraits.BAMBOO_STALK_THICKNESS);
    public static final BlockType BAMBOO_SAPLING = BlockType.of(BlockIds.BAMBOO_SAPLING, BlockTraits.HAS_AGE, BlockTraits.TREE_SPECIES_OVERWORLD);
    public static final BlockType SCAFFOLDING = BlockType.of(BlockIds.SCAFFOLDING, BlockTraits.STABILITY, BlockTraits.HAS_STABILITY_CHECK);
    public static final BlockType SMOOTH_STONE = BlockType.of(BlockIds.SMOOTH_STONE);
    public static final BlockType LECTERN = BlockType.of(BlockIds.LECTERN, BlockTraits.IS_POWERED, BlockTraits.DIRECTION);
    public static final BlockType GRINDSTONE = BlockType.of(BlockIds.GRINDSTONE, BlockTraits.DIRECTION, BlockTraits.ATTACHMENT);
    public static final BlockType BLAST_FURNACE = BlockType.of(BlockIds.BLAST_FURNACE, BlockTraits.FACING_DIRECTION, BlockTraits.IS_EXTINGUISHED);
    public static final BlockType STONECUTTER_BLOCK = BlockType.of(BlockIds.STONECUTTER_BLOCK, BlockTraits.FACING_DIRECTION);
    public static final BlockType SMOKER = BlockType.of(BlockIds.SMOKER, BlockTraits.FACING_DIRECTION, BlockTraits.IS_EXTINGUISHED);
    public static final BlockType CARTOGRAPHY_TABLE = BlockType.of(BlockIds.CARTOGRAPHY_TABLE);
    public static final BlockType FLETCHING_TABLE = BlockType.of(BlockIds.FLETCHING_TABLE);
    public static final BlockType SMITHING_TABLE = BlockType.of(BlockIds.SMITHING_TABLE);
    public static final BlockType BARREL = BlockType.of(BlockIds.BARREL, BlockTraits.FACING_DIRECTION, BlockTraits.IS_OPEN);
    public static final BlockType LOOM = BlockType.of(BlockIds.LOOM, BlockTraits.DIRECTION);
    public static final BlockType BELL = BlockType.of(BlockIds.BELL, BlockTraits.ATTACHMENT, BlockTraits.IS_TOGGLED, BlockTraits.DIRECTION);
    public static final BlockType SWEET_BERRY_BUSH = BlockType.of(BlockIds.SWEET_BERRY_BUSH, BlockTraits.GROWTH);
    public static final BlockType LANTERN = BlockType.of(BlockIds.LANTERN, BlockTraits.IS_HANGING, BlockTraits.IS_SOUL);
    public static final BlockType CAMPFIRE = BlockType.of(BlockIds.CAMPFIRE, BlockTraits.IS_EXTINGUISHED, BlockTraits.DIRECTION, BlockTraits.IS_SOUL);
    public static final BlockType JIGSAW = BlockType.of(BlockIds.JIGSAW, BlockTraits.FACING_DIRECTION, BlockTraits.DIRECTION);
    public static final BlockType WOOD = BlockType.of(BlockIds.WOOD, BlockTraits.IS_STRIPPED, BlockTraits.AXIS, BlockTraits.TREE_SPECIES);
    public static final BlockType COMPOSTER = BlockType.of(BlockIds.COMPOSTER, BlockTraits.COMPOSTER_FILL_LEVEL);
    public static final BlockType LIGHT_BLOCK = BlockType.of(BlockIds.LIGHT_BLOCK, BlockTraits.LIGHT_LEVEL);
    public static final BlockType WITHER_ROSE = BlockType.of(BlockIds.WITHER_ROSE);
    public static final BlockType BEE_NEST = BlockType.of(BlockIds.BEE_NEST, BlockTraits.DIRECTION, BlockTraits.HONEY_LEVEL);
    public static final BlockType BEEHIVE = BlockType.of(BlockIds.BEEHIVE, BlockTraits.DIRECTION, BlockTraits.HONEY_LEVEL);
    public static final BlockType HONEY_BLOCK = BlockType.of(BlockIds.HONEY_BLOCK);
    public static final BlockType HONEYCOMB_BLOCK = BlockType.of(BlockIds.HONEYCOMB_BLOCK);
    public static final BlockType LODESTONE = BlockType.of(BlockIds.LODESTONE);
    public static final BlockType NETHER_ROOTS = BlockType.of(BlockIds.CRIMSON_ROOTS, BlockTraits.TREE_SPECIES_NETHER);
    public static final BlockType NETHER_FUNGUS = BlockType.of(BlockIds.CRIMSON_FUNGUS, BlockTraits.TREE_SPECIES_NETHER);
    public static final BlockType SHROOMLIGHT = BlockType.of(BlockIds.SHROOMLIGHT);
    public static final BlockType WEEPING_VINES = BlockType.of(BlockIds.WEEPING_VINES, BlockTraits.WEEPING_VINES_AGE);
    public static final BlockType NETHER_NYLIUM = BlockType.of(BlockIds.CRIMSON_NYLIUM, BlockTraits.TREE_SPECIES_NETHER);
    public static final BlockType BASALT = BlockType.of(BlockIds.BASALT, BlockTraits.AXIS);
    public static final BlockType POLISHED_BASALT = BlockType.of(BlockIds.POLISHED_BASALT, BlockTraits.AXIS);
    public static final BlockType SOUL_SOIL = BlockType.of(BlockIds.SOUL_SOIL);
    public static final BlockType SOUL_FIRE = BlockType.of(BlockIds.SOUL_FIRE, BlockTraits.AGE);
    public static final BlockType NETHER_SPROUTS = BlockType.of(BlockIds.NETHER_SPROUTS);
    public static final BlockType TARGET = BlockType.of(BlockIds.TARGET);
    public static final BlockType NETHERITE_BLOCK = BlockType.of(BlockIds.NETHERITE_BLOCK);
    public static final BlockType ANCIENT_DEBRIS = BlockType.of(BlockIds.ANCIENT_DEBRIS);
    public static final BlockType RESPAWN_ANCHOR = BlockType.of(BlockIds.RESPAWN_ANCHOR, BlockTraits.RESPAWN_ANCHOR_CHARGE);
    public static final BlockType BLACKSTONE = BlockType.of(BlockIds.BLACKSTONE);
    public static final BlockType POLISHED_BLACKSTONE_BRICKS = BlockType.of(BlockIds.POLISHED_BLACKSTONE_BRICKS);
    public static final BlockType CHISELED_POLISHED_BLACKSTONE = BlockType.of(BlockIds.CHISELED_POLISHED_BLACKSTONE);
    public static final BlockType CRACKED_POLISHED_BLACKSTONE_BRICKS = BlockType.of(BlockIds.CRACKED_POLISHED_BLACKSTONE_BRICKS);
    public static final BlockType GILDED_BLACKSTONE = BlockType.of(BlockIds.GILDED_BLACKSTONE);
    public static final BlockType CHAIN = BlockType.of(BlockIds.CHAIN, BlockTraits.AXIS);
    public static final BlockType TWISTING_VINES = BlockType.of(BlockIds.TWISTING_VINES, BlockTraits.TWISTING_VINES_AGE);
    public static final BlockType NETHER_GOLD_ORE = BlockType.of(BlockIds.NETHER_GOLD_ORE);
    public static final BlockType CRYING_OBSIDIAN = BlockType.of(BlockIds.CRYING_OBSIDIAN);
    public static final BlockType POLISHED_BLACKSTONE = BlockType.of(BlockIds.POLISHED_BLACKSTONE);
    public static final BlockType QUARTZ_BRICKS = BlockType.of(BlockIds.QUARTZ_BRICKS);
    /* 1.17 Blocks */
    public static final BlockType POWDER_SNOW = BlockType.of(BlockIds.POWDER_SNOW);
    public static final BlockType SCULK_SENSOR = BlockType.of(BlockIds.SCULK_SENSOR, BlockTraits.IS_POWERED);
    public static final BlockType POINTED_DRIPSTONE = BlockType.of(BlockIds.POINTED_DRIPSTONE, BlockTraits.DRIPSTONE_THICKNESS, BlockTraits.IS_HANGING);
    public static final BlockType COPPER_ORE = BlockType.of(BlockIds.COPPER_ORE);
    public static final BlockType LIGHTNING_ROD = BlockType.of(BlockIds.LIGHTNING_ROD, BlockTraits.FACING_DIRECTION);
    public static final BlockType DRIPSTONE_BLOCK = BlockType.of(BlockIds.DRIPSTONE_BLOCK);
    public static final BlockType DIRT_WITH_ROOTS = BlockType.of(BlockIds.DIRT_WITH_ROOTS);
    public static final BlockType HANGING_ROOTS = BlockType.of(BlockIds.HANGING_ROOTS);
    public static final BlockType MOSS_BLOCK = BlockType.of(BlockIds.MOSS_BLOCK);
    public static final BlockType SPORE_BLOSSOM = BlockType.of(BlockIds.SPORE_BLOSSOM);
    public static final BlockType BIG_DRIPLEAF = BlockType.of(BlockIds.BIG_DRIPLEAF, BlockTraits.DRIPLEAF_HEAD, BlockTraits.DRIPLEAF_TILT, BlockTraits.DIRECTION);
    public static final BlockType AZALEA_LEAVES = BlockType.of(BlockIds.AZALEA_LEAVES, BlockTraits.IS_FLOWERED, BlockTraits.IS_PERSISTENT, BlockTraits.HAS_UPDATE);
    public static final BlockType CALCITE = BlockType.of(BlockIds.CALCITE);
    public static final BlockType AMETHYST_BLOCK = BlockType.of(BlockIds.AMETHYST_BLOCK);
    public static final BlockType BUDDING_AMETHYST = BlockType.of(BlockIds.BUDDING_AMETHYST);
    public static final BlockType AMETHYST_CLUSTER = BlockType.of(BlockIds.AMETHYST_CLUSTER, BlockTraits.CLUSTER_SIZE, BlockTraits.FACING_DIRECTION);
    public static final BlockType TUFF = BlockType.of(BlockIds.TUFF);
    public static final BlockType TINTED_GLASS = BlockType.of(BlockIds.TINTED_GLASS);
    public static final BlockType MOSS_CARPET = BlockType.of(BlockIds.MOSS_CARPET);
    public static final BlockType SMALL_DRIPLEAF = BlockType.of(BlockIds.SMALL_DRIPLEAF_BLOCK, BlockTraits.DIRECTION, BlockTraits.IS_UPPER_BLOCK);
    public static final BlockType AZALEA = BlockType.of(BlockIds.AZALEA, BlockTraits.IS_FLOWERED);
    public static final BlockType GLOW_FRAME = BlockType.of(BlockIds.GLOW_FRAME, BlockTraits.FACING_DIRECTION, BlockTraits.HAS_MAP, BlockTraits.HAS_PHOTO);
    public static final BlockType COPPER = BlockType.of(BlockIds.COPPER_BLOCK, BlockTraits.COPPER_TYPE);
    public static final BlockType CUT_COPPER = BlockType.of(BlockIds.CUT_COPPER, BlockTraits.COPPER_TYPE);
    public static final BlockType COPPER_STAIRS = BlockType.of(BlockIds.CUT_COPPER_STAIRS, BlockTraits.COPPER_TYPE, BlockTraits.IS_UPSIDE_DOWN, BlockTraits.DIRECTION);
    public static final BlockType COPPER_SLAB = BlockType.of(BlockIds.CUT_COPPER_SLAB, BlockTraits.COPPER_TYPE, BlockTraits.SLAB_SLOT);
    public static final BlockType CAVE_VINES = BlockType.of(BlockIds.CAVE_VINES, BlockTraits.CAVE_VINE_TYPE, BlockTraits.CAVE_VINE_AGE);
    public static final BlockType SMOOTH_BASALT = BlockType.of(BlockIds.SMOOTH_BASALT);
    public static final BlockType DEEPSLATE = BlockType.of(BlockIds.DEEPSLATE, BlockTraits.IS_INFESTED, BlockTraits.AXIS);
    public static final BlockType COBBLED_DEEPSLATE = BlockType.of(BlockIds.COBBLED_DEEPSLATE);
    public static final BlockType POLISHED_DEEPSLATE = BlockType.of(BlockIds.POLISHED_DEEPSLATE);
    public static final BlockType DEEPSLATE_TILES = BlockType.of(BlockIds.DEEPSLATE_TILES);
    public static final BlockType DEEPSLATE_BRICKS = BlockType.of(BlockIds.DEEPSLATE_BRICKS);
    public static final BlockType CHISELED_DEEPSLATE = BlockType.of(BlockIds.CHISELED_DEEPSLATE);
    public static final BlockType DEEPSLATE_LAPIS_ORE = BlockType.of(BlockIds.DEEPSLATE_LAPIS_ORE);
    public static final BlockType DEEPSLATE_IRON_ORE = BlockType.of(BlockIds.DEEPSLATE_IRON_ORE);
    public static final BlockType DEEPSLATE_GOLD_ORE = BlockType.of(BlockIds.DEEPSLATE_GOLD_ORE);
    public static final BlockType DEEPSLATE_REDSTONE_ORE = BlockType.of(BlockIds.DEEPSLATE_REDSTONE_ORE, BlockTraits.IS_EXTINGUISHED);
    public static final BlockType DEEPSLATE_DIAMOND_ORE = BlockType.of(BlockIds.DEEPSLATE_DIAMOND_ORE);
    public static final BlockType DEEPSLATE_COAL_ORE = BlockType.of(BlockIds.DEEPSLATE_COAL_ORE);
    public static final BlockType DEEPSLATE_EMERALD_ORE = BlockType.of(BlockIds.DEEPSLATE_EMERALD_ORE);
    public static final BlockType DEEPSLATE_COPPER_ORE = BlockType.of(BlockIds.DEEPSLATE_COPPER_ORE);
    public static final BlockType CRACKED_DEEPSLATE_TILES = BlockType.of(BlockIds.CRACKED_DEEPSLATE_TILES);
    public static final BlockType CRACKED_DEEPSLATE_BRICKS = BlockType.of(BlockIds.CRACKED_DEEPSLATE_BRICKS);
    public static final BlockType GLOW_LICHEN = BlockType.of(BlockIds.GLOW_LICHEN, BlockTraits.MULTI_FACE_DIRECTION);
    public static final BlockType CANDLE = BlockType.of(BlockIds.CANDLE, BlockTraits.CANDLES, BlockTraits.IS_LIT, BlockTraits.COLOR_CANDLE);
    public static final BlockType CANDLE_CAKE = BlockType.of(BlockIds.CANDLE_CAKE, BlockTraits.IS_LIT, BlockTraits.COLOR_CANDLE);
    public static final BlockType RAW_IRON_BLOCK = BlockType.of(BlockIds.RAW_IRON_BLOCK);
    public static final BlockType RAW_COPPER_BLOCK = BlockType.of(BlockIds.RAW_COPPER_BLOCK);
    public static final BlockType RAW_GOLD_BLOCK = BlockType.of(BlockIds.RAW_GOLD_BLOCK);
    public static final BlockType SCULK = BlockType.of(BlockIds.SCULK);
    public static final BlockType SCULK_VEIN = BlockType.of(BlockIds.SCULK_VEIN, BlockTraits.MULTI_FACE_DIRECTION);
    public static final BlockType SCULK_CATALYST = BlockType.of(BlockIds.SCULK_CATALYST, BlockTraits.IS_BLOOMING);
    public static final BlockType SCULK_SHRIEKER = BlockType.of(BlockIds.SCULK_SHRIEKER, BlockTraits.IS_ACTIVE);
    public static final BlockType CLIENT_REQUEST_PLACEHOLDER_BLOCK = BlockType.of(BlockIds.CLIENT_REQUEST_PLACEHOLDER_BLOCK);
    public static final BlockType FROG_SPAWN = BlockType.of(BlockIds.FROG_SPAWN);
    public static final BlockType PEARLESCENT_FROGLIGHT = BlockType.of(BlockIds.PEARLESCENT_FROGLIGHT, BlockTraits.AXIS);
    public static final BlockType VERDANT_FROGLIGHT = BlockType.of(BlockIds.VERDANT_FROGLIGHT, BlockTraits.AXIS);
    public static final BlockType OCHRE_FROGLIGHT = BlockType.of(BlockIds.OCHRE_FROGLIGHT, BlockTraits.AXIS);
    public static final BlockType MANGROVE_LEAVES = BlockType.of(BlockIds.MANGROVE_LEAVES, BlockTraits.IS_PERSISTENT, BlockTraits.HAS_UPDATE);
    public static final BlockType MANGROVE_PROPAGULE = BlockType.of(BlockIds.MANGROVE_PROPAGULE, BlockTraits.FACING_DIRECTION, BlockTraits.GROWTH);
    public static final BlockType MANGROVE_PROPAGULE_HANGING = BlockType.of(BlockIds.MANGROVE_PROPAGULE_HANGING, BlockTraits.FACING_DIRECTION, BlockTraits.GROWTH);
    public static final BlockType MUD = BlockType.of(BlockIds.MUD);
    public static final BlockType MUD_BRICK_DOUBLE_SLAB = BlockType.of(BlockIds.MUD_BRICK_DOUBLE_SLAB, BlockTraits.IS_TOP_SLOT);
    public static final BlockType MUD_BRICK_SLAB = BlockType.of(BlockIds.MUD_BRICK_SLAB, BlockTraits.IS_TOP_SLOT);
    public static final BlockType MUD_BRICK_STAIRS = BlockType.of(BlockIds.MUD_BRICK_STAIRS, BlockTraits.IS_UPSIDE_DOWN, BlockTraits.DIRECTION);
    public static final BlockType MUD_BRICK_WALL = BlockType.of(BlockIds.MUD_BRICK_WALL, BlockTraits.WALL_CONNECTION_EAST, BlockTraits.HAS_POST, BlockTraits.WALL_CONNECTION_SOUTH, BlockTraits.WALL_CONNECTION_WEST, BlockTraits.WALL_CONNECTION_NORTH);
    public static final BlockType MUD_BRICKS = BlockType.of(BlockIds.MUD_BRICKS);
    public static final BlockType PACKED_MUD = BlockType.of(BlockIds.PACKED_MUD);
    public static final BlockType REINFORCED_DEEPSLATE = BlockType.of(BlockIds.REINFORCED_DEEPSLATE);

    public static final BlockType UNKNOWN = BlockType.of(BlockIds.UNKNOWN);
}
